ALTER TABLE core.deposit_products ADD COLUMN ac_op_commission numeric;




-- DROP FUNCTION deposit.collector_account_op_count(date, date, integer);



CREATE OR REPLACE FUNCTION deposit.collector_account_op_count(
	from_ date,
	to_ date,
	office_id_ integer)
    RETURNS TABLE(office_id integer, collector_id integer,collector_name character varying,  rs_50_new_ac int, rs_50_old_ac int, rs_100_new_ac int, rs_100_old_ac int) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

--SELECT * FROM deposit.collector_account_op_count('2019-01-01'::date, '2019-01-29'::date,0)


BEGIN
	CREATE TEMP TABLE _t(
    id                  SERIAL,
    office_id           int,
    collector_id		int,
    customer_id         bigint,
	cust_entry_date		date,
    ac_creation_date	date,		
    account_number      character varying(50),
    customer_name       text,
    permanent_address   text,
    contact_number      text,
    collector_name      character varying(150),
    product_name        character varying(150),
	fty_rs_new			int,
	fty_rs_old			int,
	hndrd_rs_new		int,
	hndrd_rs_old			int
    ) ON COMMIT DROP;
		
	CREATE TEMP TABLE _r(office_id   int,
						 collector_id int,
						 collector_name character varying,
						fty_rs_new	  int, 
						fty_rs_old	  int,
						hndrd_rs_new	  int,
						hndrd_rs_old	  int) ON COMMIT DROP;

	IF office_id_>0 THEN
	INSERT INTO _t(office_id, collector_id, cust_entry_date,ac_creation_date, customer_id, account_number , collector_name, product_name)
	SELECT ac.office_id,
	co.collector_id, 
	c.date_of_application,
	ac.account_open_date, 
	ac.customer_id ,            
	ac.account_number,   
	co.collector_name,            
	p.deposit_product_name 
FROM deposit.account_holders ac INNER JOIN core.customers_view c ON ac.customer_id = c.customer_id               
INNER JOIN core.deposit_products p ON ac.deposit_product_id = p.deposit_product_id                  
JOIN office.collectors co ON ac.collector_id = co.collector_id
WHERE ac.creation_date between from_ and to_
--AND co.collector_id = collector_id_
AND ac.office_id = office_id_ ;




	INSERT INTO _r(office_id, collector_id, collector_name)
	SELECT c.office_id, c.collector_id, c.collector_name FROM office.collectors c WHERE c.office_id = office_id_ ORDER BY c.collector_id;


ELSE 
	INSERT INTO _t(office_id, collector_id, cust_entry_date,ac_creation_date, customer_id, account_number , collector_name, product_name)
	SELECT ac.office_id,
	co.collector_id, 
	c.date_of_application,
	ac.account_open_date, 
	ac.customer_id ,            
	ac.account_number,   
	co.collector_name,            
	p.deposit_product_name 
FROM deposit.account_holders ac INNER JOIN core.customers_view c ON ac.customer_id = c.customer_id               
INNER JOIN core.deposit_products p ON ac.deposit_product_id = p.deposit_product_id                  
JOIN office.collectors co ON ac.collector_id = co.collector_id
WHERE ac.creation_date between from_ and to_ ;

	INSERT INTO _r(office_id, collector_id, collector_name)
	SELECT c.office_id, c.collector_id, c.collector_name FROM office.collectors c ORDER BY c.office_id, c.collector_id;

END IF;


---50 RS
	UPDATE _r SET fty_rs_new=a.tot
		FROM (SELECT _t.collector_id, count(*) tot from _t
		INNER JOIN core.deposit_products p ON _t.product_name = p.deposit_product_name
		WHERE p.ac_op_commission = '50'
		AND _t.cust_entry_date = _t.ac_creation_date
		GROUP BY _t.collector_id)a
WHERE a.collector_id=_r.collector_id;

	UPDATE _r SET fty_rs_old=a.tot
		FROM (SELECT _t.collector_id, count(*) tot from _t
		INNER JOIN core.deposit_products p ON _t.product_name = p.deposit_product_name
		WHERE p.ac_op_commission = '50'
		AND _t.cust_entry_date <> _t.ac_creation_date
		GROUP BY _t.collector_id)a
WHERE a.collector_id=_r.collector_id;


---100 RS
	UPDATE _r SET fty_rs_new=a.tot
		FROM (SELECT _t.collector_id, count(*) tot from _t
		INNER JOIN core.deposit_products p ON _t.product_name = p.deposit_product_name
		WHERE p.ac_op_commission = 100
		AND _t.cust_entry_date = _t.ac_creation_date
		GROUP BY _t.collector_id)a
	WHERE a.collector_id=_r.collector_id;

	UPDATE _r SET fty_rs_old=a.tot
		FROM (SELECT _t.collector_id, count(*) tot from _t
		INNER JOIN core.deposit_products p ON _t.product_name = p.deposit_product_name
		WHERE p.ac_op_commission = 100
		AND _t.cust_entry_date <> _t.ac_creation_date
		GROUP BY _t.collector_id)a
WHERE a.collector_id=_r.collector_id;


DELETE FROM _r WHERE _r.fty_rs_new IS NULL AND _r.fty_rs_old IS NULL AND _r.hndrd_rs_new IS NULL AND _r.hndrd_rs_old IS NULL;


	RETURN QUERY(SELECT _r.office_id, _r.collector_id,_r.collector_name, _r.fty_rs_new, _r.fty_rs_old, _r.hndrd_rs_new, _r.hndrd_rs_old FROM  _r ORDER BY _r.office_id, _r.collector_name);
END

$BODY$;

ALTER FUNCTION deposit.collector_account_op_count(date, date, integer)
    OWNER TO postgres;
